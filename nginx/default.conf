server {
    listen 80;  # The server listens on port 80 (standard HTTP port)

    location /app {
        # All requests to paths starting with /api will be handled here.
        proxy_pass http://flask-backend:5000;  # Forward requests to the Flask backend running on port 5000.
        # proxy_pass https://api.openai.com;
        proxy_ssl_server_name on;
        # Set various headers to pass along useful information to the backend.
        proxy_set_header Host $host;  # Pass the original Host header from the client to the backend.
        proxy_set_header X-Real-IP $remote_addr;  # Pass the real client IP to the backend.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Pass the chain of client IPs (in case of multiple proxies).
        proxy_set_header X-Forwarded-Proto $scheme;  # Pass the protocol (HTTP or HTTPS) used by the client.
        # add_header 'Access-Control-Allow-Origin' '*' always;
        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
        add_header 'Access-Control-Allow-Headers' 'Origin, Authorization, X-Requested-With, Content-Type, Accept';
        add_header 'Access-Control-Max-Age' 3600;
        # Handle preflight requests
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
            add_header 'Access-Control-Allow-Headers' 'Origin, Authorization, X-Requested-With, Content-Type, Accept';
            add_header 'Access-Control-Max-Age' 3600;
            return 204;  # No content
        }
    }


    location / {
        # All requests not starting with /api will be handled here (typically for serving the frontend).
        proxy_pass http://react-frontend:80;  # Forward requests to the React frontend, which is served internally on port 80.
        # proxy_pass https://api.openai.com;
        proxy_ssl_server_name on;
        # Similar to the /api block, forward headers to the frontend.
        proxy_set_header Host $host;  # Pass the original Host header.
        proxy_set_header X-Real-IP $remote_addr;  # Pass the real client IP.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Pass the client IP chain.
        proxy_set_header X-Forwarded-Proto $scheme;  # Pass the protocol (HTTP or HTTPS).
        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
        add_header 'Access-Control-Allow-Headers' 'Origin, Authorization, X-Requested-With, Content-Type, Accept';
        add_header 'Access-Control-Max-Age' 3600;
        # Handle preflight requests
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
            add_header 'Access-Control-Allow-Headers' 'Origin, Authorization, X-Requested-With, Content-Type, Accept';
            add_header 'Access-Control-Max-Age' 3600;
            return 204;  # No content
        }
    }
}